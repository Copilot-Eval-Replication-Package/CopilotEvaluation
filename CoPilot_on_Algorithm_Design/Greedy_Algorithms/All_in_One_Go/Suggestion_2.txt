Synthesizing 7/10 solutions

=======

# 
# 
# def check_overlap(activity1, activity2):
#     if activity1.end_time < activity2.start_time:
#         return True
#     elif activity1.start_time > activity2.end_time:
#         return True
#     else:
#         return False
# 
# 
# class Set:
#     def __init__(self):
#         self.activities = []
# 
#     def add_activity(self, activity):
#         if self.activities == []:
#             self.activities.append(activity)
#         elif activity.start_time >= self.activities[-1].end_time:
#             self.activities.append(activity)
#         elif activity.end_time <= self.activities[0].start_time:
#             self.activities.insert(0, activity)
#         elif check_overlap(activity, self.activities[0]):
#             print("Activity not added")
#         else:
#             for i in range(len(self.activities)):
#                 if check_overlap(activity, self.activities[i]):
#                     print("Activity not added")
#                     break
#                 elif i == len(self.activities) - 1:
#                     self.activities.append(activity)
#                     break
# 
# def main():
#     activity1 = Activity(4, 6)
#     activity2 = Activity(2, 9)
#     activity3 = Activity(3, 5)
#     activity4 = Activity(1, 7)
#     activity5 = Activity(6, 8)
#     activity6 = Activity(7, 9)
#     set1 = Set()
#     set1.add_activity(activity1)
#     set1.add_activity(activity2)
#     set1.add_activity(activity3)
#     set1.add_activity(activity4)
#     set1.add_activity(activity5)
#     set1.add_activity(activity6)
#

=======


#!/usr/bin/env python3
# Path: CoPilot_on_Algorithm_Design/Greedy_Algorithms/test.py
# Compare this snippet from CoPilot_on_Algorithm_Design/Greedy_Algorithms/asp.py:
# # implement a class called activity. each instance of this class has two attributes: start_time and end_time. both should be int numbers between 0 and 24.
# class Activity:
#     def __init__(self, start_time, end_time):
#         self.start_time = start_time
#         self.end_time = end_time
# 
# 
# # implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# # the fuction should also check that the activities are not overlapping.
# def check_overlap(activity1, activity2):
#     if activity1.end_time < activity2.start_time:
#         return True
#     elif activity1.start_time > activity2.end_time:
#         return True
#     else:
#         return False
# 
# 
# # implement a class named set. each instance of this class has a list of activities.
# # the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# # and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# # before adding an activiy, the list should be sorted by finish time.
# class Set:
#     def __init__(self):
#         self.activities = []
# 
#     def add_activity(self, activity):
#         if self.activities == []:
#             self.activities.append(activity)
#         elif activity.start_time >= self.activities[-1].end_time:
#             self.activities.append(activity)
#         elif activity.end_time <= self.activities[0].start_time:
#             self.activities

=======

# implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# the fuction should also check that the activities are not overlapping.
# finally, implement a class named set. each instance of this class has a list of activities.
# the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# before adding an activiy, the list should be sorted by finish time.
# implement a class called activity. each instance of this class has two attributes: start_time and end_time. both should be int numbers between 0 and 24.
# then, implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# the fuction should also check that the activities are not overlapping.
# finally, implement a class named set. each instance of this class has a list of activities.
# the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# before adding an activiy, the list should be sorted by finish time.
# implement a class called activity. each instance of this class has two attributes: start_time and end_time. both should be int numbers between 0 and 24.
# then, implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# the fuction should also check that the activities are not overlapping.
# finally, implement a class named set. each instance of this class has a list of activities.
# the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# before adding an activiy, the list should be sorted by finish time.
# implement a class called

=======

# then, implement a function for adding an activity to a set.
# the function should check that the activity is not overlapping with any other activity in the set.
# finally, implement a function for printing the activities in a set.
# 
# 
# # implement a class called activity. each instance of this class has two attributes: start_time and end_time. both should be int numbers between 0 and 24.
# class Activity:
#     def __init__(self, start_time, end_time):
#         self.start_time = start_time
#         self.end_time = end_time
# 
# 
# # implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# # the fuction should also check that the activities are not overlapping.
# def check_overlap(activity1, activity2):
#     if activity1.end_time < activity2.start_time:
#         return True
#     elif activity1.start_time > activity2.end_time:
#         return True
#     else:
#         return False
# 
# 
# # implement a class named set. each instance of this class has a list of activities.
# # the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# # and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# # before adding an activiy, the list should be sorted by finish time.
# class Set:
#     def __init__(self):
#         self.activities = []
# 
#     def add_activity(self, activity):
#         if self.activities == []:
#             self.activities.append(activity)
#         elif activity.start_time >= self.activities[-1].end_time:
#             self.activities.append(activity)
#         elif activity.end_time <= self.activities[0].start_time:
#             self.activities.insert(0, activity)

=======

# then, create an instance of the Set class and add some activities to it.
# finally, print the activities in the set.
# 
# # implement a class called activity. each instance of this class has two attributes: start_time and end_time. both should be int numbers between 0 and 24.
# class Activity:
#     def __init__(self, start_time, end_time):
#         self.start_time = start_time
#         self.end_time = end_time
# 
# 
# # implement a function for comparing two activities. the function should return True if the first activity ends before the second activity starts.
# # the fuction should also check that the activities are not overlapping.
# def check_overlap(activity1, activity2):
#     if activity1.end_time < activity2.start_time:
#         return True
#     elif activity1.start_time > activity2.end_time:
#         return True
#     else:
#         return False
# 
# 
# # implement a class named set. each instance of this class has a list of activities.
# # the activities in the list should be sorted by their finish time and an activity can be added to the list if it starts after the first activity finshes
# # and finishes before the last activity starts. an activity can only be added if it does not overlap with any other activity in the list.
# # before adding an activiy, the list should be sorted by finish time.
# class Set:
#     def __init__(self):
#         self.activities = []
# 
#     def add_activity(self, activity):
#         if self.activities == []:
#             self.activities.append(activity)
#         elif activity.start_time >= self.activities[-1].end_time:
#             self.activities.append(activity)
#         elif activity.end_time <= self.activities[0].start_time:
#             self.activities.insert(0, activity)
#         elif check_overlap(activity, self.activities[0]):
#             print("

=======

# then, create an instance of the set class and add two activities to it.
# print the activities in the set.
# add a third activity to the set.
# print the activities in the set.
# add a fourth activity to the set.
# print the activities in the set.
# add a fifth activity to the set.
# print the activities in the set.
# add a sixth activity to the set.
# print the activities in the set.
# add a seventh activity to the set.
# print the activities in the set.
# add an eighth activity to the set.
# print the activities in the set.
# add a ninth activity to the set.
# print the activities in the set.
# add a tenth activity to the set.
# print the activities in the set.
# add a eleventh activity to the set.
# print the activities in the set.
# add a twelfth activity to the set.
# print the activities in the set.
# add a thirteenth activity to the set.
# print the activities in the set.
# add a fourteenth activity to the set.
# print the activities in the set.
# add a fifteenth activity to the set.
# print the activities in the set.
# add a sixteenth activity to the set.
# print the activities in the set.
# add a seventeenth activity to the set.
# print the activities in the set.
# add an eighteenth activity to the set.
# print the activities in the set.
# add a nineteenth activity to the set.
# print the activities in the set.
# add a twentieth activity to the set.
# print the activities in the set.
# add a twenty-first activity to the set.
# print the activities in the set.
# add a twenty-second activity to the set.
# print the activities in the set.
# add a twenty-third activity to the set.
# print the activities in the set.
# add a twenty-fourth activity to the set.
# print the activities in the set.
# add a twenty-fifth activity to the set.
# print the activities in the set.
# add a twenty-sixth activity to the set.
# print the activities

=======

# then, create a set with two activities and print the activities in the set.
# then, create a set with three activities and print the activities in the set.