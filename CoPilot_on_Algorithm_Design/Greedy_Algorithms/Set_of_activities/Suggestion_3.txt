Synthesizing 10/10 solutions

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
        elif activity.start_time >= self.activities[-1].end_time:
            self.activities.append(activity)
        elif check_overlap(self.activities[-1], activity):
            return False
        else:
            self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)
        return True

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
            return
        for i in range(len(self.activities)):
            if check_overlap(activity, self.activities[i]):
                return
        for i in range(len(self.activities)):
            if activity.start_time >= self.activities[i].end_time:
                self.activities.insert(i, activity)
                return
        self.activities.append(activity)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    return False
            self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)
        return True

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(self.activities[i], activity):
                    return
                elif i == len(self.activities)-1:
                    self.activities.append(activity)
                    self.activities.sort(key=lambda x: x.end_time)
                    return
                elif activity.start_time < self.activities[i].start_time and activity.end_time < self.activities[i].end_time:
                    self.activities.insert(i, activity)
                    return
                elif activity.start_time > self.activities[i].start_time and activity.end_time > self.activities[i].end_time:
                    continue
                else:
                    self.activities.insert(i, activity)
                    return

    def get_activities(self):
        return self.activities

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    print('Activity overlaps with other activities')
                    break
                elif activity.start_time >= self.activities[i].end_time:
                    self.activities.insert(i, activity)
                    break
                elif activity.end_time <= self.activities[-1].start_time:
                    self.activities.append(activity)
                    break
                else:
                    print('Activity is not added')

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)

    def sort_activities(self):
        self.activities.sort(key=lambda x: x.end_time)

    def add_sorted_activity(self, activity):
        if len(self.activities) == 0:
            self.add_activity(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(self.activities[i], activity):
                    return
            self.add_activity(activity)
            self.sort_activities()

=======

# implement a function called add_activity that takes an activity and adds it to the list.
# implement a function called get_activities that returns the list of activities.

=======

# implement the following functions:
# add_activity(activity)
# sort_activities()
# print_activities()