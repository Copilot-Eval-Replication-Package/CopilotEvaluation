Synthesizing 10/10 solutions

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
        elif check_overlap(self.activities[-1], activity) is True:
            return
        else:
            self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

    def add_activities(self, activities):
        for activity in activities:
            self.add_activity(activity)

    def __str__(self):
        return str([str(activity) for activity in self.activities])

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if activity.start_time >= self.activities[i].end_time:
                    if i == len(self.activities) - 1:
                        self.activities.append(activity)
                    else:
                        continue
                else:
                    if check_overlap(self.activities[i], activity):
                        print("Activity overlaps with another activity")
                    else:
                        self.activities.insert(i, activity)
        self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    return False
            self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)
        return True

=======

class Set:
    def __init__(self, activities):
        self.activities = sorted(activities, key=lambda activity: activity.end_time)

    def add_activity(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
        else:
            if check_overlap(activity, self.activities[-1]):
                return
            else:
                self.activities.append(activity)
                self.activities = sorted(self.activities, key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.sort_activities()

    def sort_activities(self):
        self.activities.sort(key=lambda activity: activity.end_time)

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities
        self.activities.sort(key=lambda activity: activity.end_time)

    def add_activity(self, activity):
        if check_overlap(self.activities[0], activity):
            return False
        elif check_overlap(activity, self.activities[-1]):
            return False
        else:
            self.activities.append(activity)
            self.activities.sort(key=lambda activity: activity.end_time)
            return True

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        if activity.start_time < self.activities[-1].end_time and activity.end_time > self.activities[0].start_time:
            self.activities.append(activity)
            self.activities.sort(key=lambda activity: activity.end_time)
        else:
            print('Activity cannot be added')