Synthesizing 9/10 solutions

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        elif activity.start_time >= self.activities[-1].end_time:
            self.activities.append(activity)
        elif activity.end_time <= self.activities[0].start_time:
            self.activities.insert(0, activity)
        elif check_overlap(activity, self.activities[0]):
            print("Activity not added")
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    print("Activity not added")
                    break
                elif i == len(self.activities) - 1:
                    self.activities.append(activity)
                    break

    def print_activities(self):
        for activity in self.activities:
            print(activity.start_time, " ", activity.end_time)

=======

class Set:
    def __init__(self):
        self.activity_list = []

    def add_activity(self, activity):
        self.activity_list.append(activity)
        self.activity_list.sort(key=lambda activity: activity.end_time)

    def add_activities(self, activity_list):
        for activity in activity_list:
            self.add_activity(activity)

    def get_activity_list(self):
        return self.activity_list

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.sort_activities()

    def sort_activities(self):
        self.activities.sort(key=lambda x: x.end_time)

    def add_new_activity(self, activity):
        if self.activities:
            if check_overlap(self.activities[-1], activity):
                self.add_activity(activity)
        else:
            self.add_activity(activity)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add_activity(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
        elif check_overlap(self.activities[-1], activity):
            return
        else:
            self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def __str__(self):
        return str(self.activities)

    def add_activity(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
            return
        elif check_overlap(activity, self.activities[0]):
            return
        elif check_overlap(self.activities[-1], activity):
            return
        else:
            for i in range(len(self.activities)):
                if activity.start_time < self.activities[i].start_time:
                    self.activities.insert(i, activity)
                    return
            self.activities.append(activity)

=======

class Set:
    def __init__(self, activity_list):
        self.activity_list = activity_list

    def add_activity(self, activity):
        self.activity_list.append(activity)
        self.activity_list.sort(key=lambda x: x.end_time)

    def __str__(self):
        return str(self.activity_list)

=======

# implement a function for adding an activity to the list.
# implement a function for printing the activities in the list.
# implement a function for removing an activity from the list.
# implement a function for checking if an activity is in the list.
# implement a function for checking if an activity is in the list and removing it.

=======

# implement a function called add_activity that takes an activity as a parameter and adds it to the list.
# implement a function called get_activities that returns the list of activities in the set.