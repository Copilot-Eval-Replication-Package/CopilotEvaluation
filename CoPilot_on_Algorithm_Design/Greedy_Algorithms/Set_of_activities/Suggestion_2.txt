Synthesizing 10/10 solutions

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

    def __repr__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.sort_activities()

    def sort_activities(self):
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.sort_by_end_time()

    def sort_by_end_time(self):
        self.activities.sort(key=lambda x: x.end_time)

    def check_overlap(self, activity):
        if len(self.activities) == 0:
            return True
        else:
            return check_overlap(self.activities[-1], activity)

    def add_activity_if_possible(self, activity):
        if self.check_overlap(activity):
            self.add_activity(activity)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    return False
            self.activities.append(activity)
            self.activities.sort(key=lambda x: x.end_time)
        return True

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add_activity(self, activity):
        if len(self.activities) == 0:
            self.activities.append(activity)
            return
        for i in range(len(self.activities)):
            if activity.start_time >= self.activities[i].end_time:
                self.activities.insert(i, activity)
                return
        else:
            self.activities.append(activity)

    def get_activities(self):
        return self.activities

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            if check_overlap(activity, self.activities[-1]):
                print("overlap")
            else:
                self.activities.append(activity)
            self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

    def __repr__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        for i in range(len(self.activities)):
            if check_overlap(self.activities[i], activity):
                break
        else:
            self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add(self, activity):
        if activity.start_time >= self.activities[-1].end_time:
            self.activities.append(activity)
        elif activity.end_time <= self.activities[0].start_time:
            self.activities.insert(0, activity)
        else:
            for i in range(len(self.activities)):
                if check_overlap(activity, self.activities[i]):
                    break
            else:
                self.activities.insert(i, activity)

=======

# implement a function for adding an activity to the list.
# implement a function for printing the activities in the list.