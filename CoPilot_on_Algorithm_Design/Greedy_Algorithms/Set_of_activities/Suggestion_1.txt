Synthesizing 10/10 solutions

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda x: x.end_time)

    def __str__(self):
        return '\n'.join([str(x) for x in self.activities])

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        if not self.activities:
            self.activities.append(activity)
        else:
            if activity.start_time >= self.activities[-1].end_time:
                self.activities.append(activity)
            else:
                for i in range(len(self.activities)):
                    if activity.start_time >= self.activities[i].end_time:
                        self.activities.insert(i, activity)
                        break
                    elif activity.end_time <= self.activities[i].start_time:
                        self.activities.insert(i, activity)
                        break

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if not self.activities:
            self.activities.append(activity)
        else:
            for index, act in enumerate(self.activities):
                if compare_activities(act, activity):
                    self.activities.insert(index, activity)
                    break
            else:
                self.activities.append(activity)

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if len(self.activities) == 0 or activity.start_time >= self.activities[-1].end_time:
            self.activities.append(activity)
        elif activity.end_time <= self.activities[0].start_time:
            self.activities.insert(0, activity)
        else:
            for i in range(len(self.activities)):
                if activity.start_time >= self.activities[i].end_time:
                    self.activities.insert(i, activity)
                    break

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activity(self, activity):
        for i in range(len(self.activities)):
            if compare_activities(activity, self.activities[i]):
                self.activities.insert(i, activity)
                return
        self.activities.append(activity)

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add_activities(self, activity):
        self.activities.append(activity)
        self.activities.sort(key=lambda activity: activity.end_time)

=======

class Set:
    def __init__(self):
        self.activities = []

    def add(self, activity):
        if self.activities:
            if activity.start_time >= self.activities[-1].end_time:
                self.activities.append(activity)
        else:
            self.activities.append(activity)

    def __str__(self):
        return str(self.activities)

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
            return
        elif compare_activities(activity, self.activities[-1]):
            self.activities.append(activity)
            return
        else:
            for i in range(len(self.activities)):
                if compare_activities(activity, self.activities[i]):
                    self.activities.insert(i, activity)
                    return
            self.activities.append(activity)
            return

=======

class Set:
    def __init__(self, activities):
        self.activities = activities

    def add_activity(self, activity):
        if self.activities == []:
            self.activities.append(activity)
        else:
            for i in range(len(self.activities)):
                if compare_activities(self.activities[i], activity):
                    self.activities.insert(i, activity)
                    return
            self.activities.append(activity)