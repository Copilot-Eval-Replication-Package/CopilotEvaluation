"Synthesizing 10/10 solutions (Duplicates hidden)

=======

class dag:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = [[] for i in range(vertices)]

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def topological_sort(self):
        # create a stack
        stack = []
        # create a visited array
        visited = [False] * self.vertices
        # create a topological order array
        topological_order = []
        # iterate through the vertices
        for i in range(self.vertices):
            # if the vertex is not visited
            if not visited[i]:
                # call the recursive function
                self.topological_sort_util(i, visited, stack, topological_order)
        # reverse the topological order array
        topological_order.reverse()
        # return the topological order array
        return topological_order

    def topological_sort_util(self, i, visited, stack, topological_order):
        # mark the vertex as visited
        visited[i] = True
        # iterate through the adjacency list of the vertex
        for j in self.graph[i]:
            # if the vertex is not visited
            if not visited[j]:
                # call the recursive function
                self.topological_sort_util(j, visited, stack, topological_order)
        # push the vertex to the stack
        stack.append(i)

=======

class dag:
    def __init__(self):
        self.nodes = []
        self.edges = []
        self.visited = []
        self.stack = []
        self.topological_sort = []

    def add_node(self, node):
        self.nodes.append(node)

    def add_edge(self, node1, node2):
        self.edges.append((node1, node2))

    def dfs(self, node):
        self.visited.append(node)
        for edge in self.edges:
            if edge[0] == node and edge[1] not in self.visited:
                self.dfs(edge[1])
        self.stack.append(node)

    def topological_sort(self):
        for node in self.nodes:
            if node not in self.visited:
                self.dfs(node)
        while self.stack:
            self.topological_sort.append(self.stack.pop())
        return self.topological_sort

=======

class dag:
    def __init__(self):
        self.nodes = []
        self.edges = []
        self.visited = []
        self.stack = []
        self.topological_sort = []

    def add_node(self, node):
        self.nodes.append(node)

    def add_edge(self, edge):
        self.edges.append(edge)

    def topological_sort_helper(self, node):
        self.visited.append(node)
        for edge in self.edges:
            if edge[0] == node:
                if edge[1] not in self.visited:
                    self.topological_sort_helper(edge[1])
        self.stack.append(node)

    def topological_sort(self):
        for node in self.nodes:
            if node not in self.visited:
                self.topological_sort_helper(node)
        self.stack.reverse()
        return self.stack"