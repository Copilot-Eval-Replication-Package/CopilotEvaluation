"Synthesizing 10/10 solutions (Duplicates hidden)

=======

# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heap_sort(arr):
#     # build a max heap
#     for i in range(len(arr) // 2, -1, -1):
#         heapify(arr, i)
#     # extract the max element from the heap
#     for i in range(len(arr) - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]
#         heapify(arr, 0, i)
#     return arr
# 
# 
# def heapify(arr, i, n=None):
#     if n is None:
#         n = len(arr)
#     largest = i
#     l = 2 * i + 1
#     r = 2 * i + 2
#     if l < n and arr[l] > arr[largest]:
#         largest = l
#     if r < n and arr[r] > arr[largest]:
#         largest = r
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]
#         heapify(arr, largest, n)
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# implement a merge sort algorithm which accepts a list as input and outputs the sorted list
# source https://www.geeksforgeeks.org/merge-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def merge_sort(arr):
#     if len(arr) > 1:
#         mid = len(arr) // 2
#         left = arr[:mid]
#         right = arr[mid:]
#         merge_sort(left)
#         merge_sort(right)
#

=======

# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heapify(arr, n, i):
#     largest = i
#     l = 2 * i + 1
#     r = 2 * i + 2
#     if l < n and arr[i] < arr[l]:
#         largest = l
#     if r < n and arr[largest] < arr[r]:
#         largest = r
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]
#         heapify(arr, n, largest)
# 
# 
# def heap_sort(arr):
#     n = len(arr)
#     for i in range(n, -1, -1):
#         heapify(arr, n, i)
#     for i in range(n - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]
#         heapify(arr, i, 0)
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# implement a merge sort algorithm which accepts a list as input and outputs the sorted list
# source https://www.geeksforgeeks.org/merge-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def merge_sort(arr):
#     if len(arr) > 1:
#         mid = len(arr) // 2
#         left = arr[:mid]
#         right = arr[mid:]
#         merge_sort(left)
#         merge_sort(right)
#         i = j = k = 0
#         while i < len(left) and j < len(right):
#             if left[i] < right["