"Synthesizing 8/10 solutions (Duplicates hidden)

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heap_sort(arr):
#     n = len(arr)
#     # Build a maxheap.
#     for i in range(n, -1, -1):
#         heapify(arr, n, i)
#     # One by one extract elements
#     for i in range(n - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]  # swap
#         heapify(arr, i, 0)
#     return arr
# 
# 
# def heapify(arr, n, i):
#     largest = i  # Initialize largest as root
#     l = 2 * i + 1  # left = 2*i + 1
#     r = 2 * i + 2  # right = 2*i + 2
# 
#     # See if left child of root exists and is
#     # greater than root
#     if l < n and arr[i] < arr[l]:
#         largest = l
# 
#     # See if right child of root exists and is
#     # greater than root
#     if r < n and arr[largest] < arr[r]:
#         largest = r
# 
#     # Change root, if needed
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]  # swap
# 
#         # Heapify the root.
#         heapify(arr, n, largest)
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from uns

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heap_sort(arr):
#     n = len(arr)
#     # Build a maxheap.
#     for i in range(n, -1, -1):
#         heapify(arr, n, i)
# 
#     # One by one extract elements
#     for i in range(n - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]  # swap
#         heapify(arr, i, 0)
#     return arr
# 
# 
# def heapify(arr, n, i):
#     largest = i  # Initialize largest as root
#     l = 2 * i + 1  # left = 2*i + 1
#     r = 2 * i + 2  # right = 2*i + 2
# 
#     # See if left child of root exists and is
#     # greater than root
#     if l < n and arr[i] < arr[l]:
#         largest = l
# 
#     # See if right child of root exists and is
#     # greater than root
#     if r < n and arr[largest] < arr[r]:
#         largest = r
# 
#     # Change root, if needed
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]  # swap
# 
#         # Heapify the root.
#         heapify(arr, n, largest)
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/insertion-sort-for-sorting-algorithm/ - accessed on 30/03/2022
# import random
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 7 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(insertion_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/insertion-sort-for-sorting-algorithm/ - accessed on 30/03/2022
# import random
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(insertion_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending (Duplicates hidden)

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heap_sort(arr):
#     n = len(arr)
#     # Build a maxheap.
#     for i in range(n, -1, -1):
#         heapify(arr, n, i)
#     # One by one extract elements
#     for i in range(n - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]  # swap
#         heapify(arr, i, 0)
#     return arr
# 
# 
# def heapify(arr, n, i):
#     largest = i  # Initialize largest as root
#     l = 2 * i + 1  # left = 2*i + 1
#     r = 2 * i + 2  # right = 2*i + 2
# 
#     # See if left child of root exists and is
#     # greater than root
#     if l < n and arr[i] < arr[l]:
#         largest = l
# 
#     # See if right child of root exists and is
#     # greater than root
#     if r < n and arr[largest] < arr[r]:
#         largest = r
# 
#     # Change root, if needed
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]  # swap
# 
#         # Heapify the root.
#         heapify(arr, n, largest)
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from uns

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/heap-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def heap_sort(arr):
#     n = len(arr)
#     # Build a maxheap.
#     for i in range(n, -1, -1):
#         heapify(arr, n, i)
# 
#     # One by one extract elements
#     for i in range(n - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]  # swap
#         heapify(arr, i, 0)
#     return arr
# 
# 
# def heapify(arr, n, i):
#     largest = i  # Initialize largest as root
#     l = 2 * i + 1  # left = 2*i + 1
#     r = 2 * i + 2  # right = 2*i + 2
# 
#     # See if left child of root exists and is
#     # greater than root
#     if l < n and arr[i] < arr[l]:
#         largest = l
# 
#     # See if right child of root exists and is
#     # greater than root
#     if r < n and arr[largest] < arr[r]:
#         largest = r
# 
#     # Change root, if needed
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]  # swap
# 
#         # Heapify the root.
#         heapify(arr, n, largest)
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(heap_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order

=======

# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/insertion-sort-for-sorting-algorithm/ - accessed on 30/03/2022
# import random
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(insertion_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. finally it should return the sorted array.
# source https://www.geeksforgeeks.org/insertion-sort-for-sorting-algorithm/ - accessed on 30/03/2022
# import random
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(test)
#     print(insertion_sort(test))
# 
# create a function that accepts a list as input. the function should create two lists anmed sorted and unsorted .the function sorts an array by repeatedly finding the minimum element (considering ascending"