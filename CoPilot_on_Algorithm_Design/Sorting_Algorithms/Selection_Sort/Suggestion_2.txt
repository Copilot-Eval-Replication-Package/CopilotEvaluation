"""Synthesizing 10/10 solutions

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm. it works by iterating through the array, comparing each element with its neighbors.
# # # if the element is smaller than the neighbor, it is swapped with the neighbor.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] < arr[min_index]:
#                 min_index = j
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # def test_merge_sort():
# # # #     print(""""Testing merge sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# # # #
# # # # def test_selection_sort():
# # # #     print(""""Testing selection sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(selection_sort

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the list to be sorted, finding the minimum value, and swapping it with the current element.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# #
# #
# # def selection_sort(arr):
# #     for i in range(len(arr)):
# #         min_index = i
# #         for j in range(i + 1, len(arr)):
# #             if arr[j] < arr[min_index]:
# #                 min_index = j
# #         arr[i], arr[min_index] = arr[min_index], arr[i]
# #     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the array, finding the smallest element, and swapping it with the element at the current index.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         min_value = arr[i]
#         for j in range(i + 1, len(arr)):
#             if arr[j] < min_value:
#                 min_index = j
#                 min_value = arr[j]
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8

=======

# scan the unsorted list and find the index of the largest element. at each pass, swap the largest element with the last element in the unsorted list.
# the time complexity is O(n^2)
# the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         max_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] > arr[max_index]:
#                 max_index = j
#         arr[i], arr[max_index] = arr[max_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # # ! These were generate by CoPilot ALONGSIDE the function.
# # # # def test_insertion_sort():
# # # #     print(""""Testing insertion sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(insertion_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# #

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # # while the unsorted list is not empty:
# # # #     find the largest element in the unsorted list and append it to the sorted list
# # # #     remove the largest element from the unsorted list
# # # # return the sorted list
# #
# #
# # def merge_sort(arr):
# #     if len(arr) <= 1:
# #         return arr
# #     mid = len(arr) // 2
# #     left = merge_sort(arr[:mid])
# #     right = merge_sort(arr[mid:])
# #     return merge(left, right)
# #
# #
# # def merge(left, right):
# #     sorted_arr = []
# #     while len(left) > 0 and len(right) > 0:
# #         if left[0] > right[0]:
# #             sorted_arr.append(right.pop(0))
# #         else:
# #             sorted_arr.append(left.pop(0))
# #     if len(left) > 0:
# #         sorted_arr.extend(left)
# #     if len(right) > 0:
# #         sorted_arr.extend(right)
# #     return sorted_arr
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10

=======

# psudeo code:
# while the unsorted list is not empty:
#     find the smallest element in the unsorted list and append it to the sorted list.
#     remove the smallest element from the unsorted list.
# return the sorted list.
# 
# 
# def selection_sort(arr):
#     # psudeo code:
#     # while unsorted list is not empty:
#     #     find the smallest element in the unsorted list and append it to the sorted list.
#     #     remove the smallest element from the unsorted list.
#     # return the sorted list.
#     sorted_list = []
#     while len(arr) > 0:
#         smallest = arr[0]
#         for i in range(1, len(arr)):
#             if arr[i] < smallest:
#                 smallest = arr[i]
#         sorted_list.append(smallest)
#         arr.remove(smallest)
#     return sorted_list
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8,

=======

# while the unsorted list is not empty:
#     find the index of the largest element in the unsorted list
#     add the largest element to the sorted list
#     remove the largest element from the unsorted list
# return the sorted list
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_heap_sort():
# # #     print(""""Testing heap sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_quick_sort():
# # #     print(""""Testing quick sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6,

=======

# while the unsorted list is not empty:
#     find the index of the smallest element in the unsorted list.
#     add the smallest element to the sorted list.
#     remove the smallest element from the unsorted list.
# return the sorted list
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Compare this snippet from algorithm_design/sorting/quick_sort.py:
# # create a function that accepts an array as input. the function will create two lists, one named sorted and the other unsorted. at the begning, the unsorted list will be the same as the input array.
# # while the unsorted list is not empty:
# #     find the index of the smallest element in the unsorted list.
# #     add the smallest element to the sorted list.
# #     remove the smallest element from the unsorted list.
# # return the sorted list
# # 
# # 
# # #
# # #
# # # # ! These were generate by CoPilot ALONGSIDE the function.
# # # # def test_bubble_sort():
# # # #     print(""""Testing bubble sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #

=======

# while the length of the unsorted list is not 0:
#     find the index of the smallest element in the unsorted list
#     append the smallest element to the sorted list
#     remove the smallest element from the unsorted list
# return the sorted list
# 
# 
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([18, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # Compare this snippet from algorithm_design/sorting/insertion_sort.py:
# # create a function that accepts an array as input. scan the array and find the index of the largest element. at each pass, swap the largest element with the last element in the array.
# # ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # insertion sort is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order.
# # the time complexity is O(n^2)
# # the space complexity is O(1)
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         j = i
#         while j > 0 and arr[j] < arr[j - 1]:
#             arr[j], arr[j - 1] = arr[j - 1], arr[j]
#             j -= 1
#     return arr
# 
# 
# #
# # # ! These were generate by CoPilot ALONGSIDE the

=======

# the function will then iterate through the unsorted list and find the largest element. the largest element will then be swapped with the last element in the unsorted list.
# the function will continue to do this until the unsorted list is empty. the sorted list will contain the sorted array.
# the function will return the sorted list.
# 
# 
# def selection_sort(arr):
#     sorted_array = []
#     while len(arr) > 0:
#         max_index = 0
#         for i in range(len(arr)):
#             if arr[i] > arr[max_index]:
#                 max_index = i
#         sorted_array.append(arr.pop(max_index))
#     return sorted_array
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Compare this snippet from algorithm_design/sorting/insertion_sort.py:
# # create a function that accepts an array as input. the function will then iterate through the array and swap adjacent elements if they are in the wrong order.
#

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm. it works by iterating through the array, comparing each element with its neighbors.
# # # if the element is smaller than the neighbor, it is swapped with the neighbor.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] < arr[min_index]:
#                 min_index = j
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # def test_merge_sort():
# # # #     print(""""Testing merge sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# # # #
# # # # def test_selection_sort():
# # # #     print(""""Testing selection sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(selection_sort

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the list to be sorted, finding the minimum value, and swapping it with the current element.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# #
# #
# # def selection_sort(arr):
# #     for i in range(len(arr)):
# #         min_index = i
# #         for j in range(i + 1, len(arr)):
# #             if arr[j] < arr[min_index]:
# #                 min_index = j
# #         arr[i], arr[min_index] = arr[min_index], arr[i]
# #     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the array, finding the smallest element, and swapping it with the element at the current index.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         min_value = arr[i]
#         for j in range(i + 1, len(arr)):
#             if arr[j] < min_value:
#                 min_index = j
#                 min_value = arr[j]
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8

=======

# scan the unsorted list and find the index of the largest element. at each pass, swap the largest element with the last element in the unsorted list.
# the time complexity is O(n^2)
# the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         max_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] > arr[max_index]:
#                 max_index = j
#         arr[i], arr[max_index] = arr[max_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # # ! These were generate by CoPilot ALONGSIDE the function.
# # # # def test_insertion_sort():
# # # #     print(""""Testing insertion sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(insertion_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# #

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # # while the unsorted list is not empty:
# # # #     find the largest element in the unsorted list and append it to the sorted list
# # # #     remove the largest element from the unsorted list
# # # # return the sorted list
# #
# #
# # def merge_sort(arr):
# #     if len(arr) <= 1:
# #         return arr
# #     mid = len(arr) // 2
# #     left = merge_sort(arr[:mid])
# #     right = merge_sort(arr[mid:])
# #     return merge(left, right)
# #
# #
# # def merge(left, right):
# #     sorted_arr = []
# #     while len(left) > 0 and len(right) > 0:
# #         if left[0] > right[0]:
# #             sorted_arr.append(right.pop(0))
# #         else:
# #             sorted_arr.append(left.pop(0))
# #     if len(left) > 0:
# #         sorted_arr.extend(left)
# #     if len(right) > 0:
# #         sorted_arr.extend(right)
# #     return sorted_arr
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10

=======

# while the unsorted list is not empty:
#     find the index of the smallest element in the unsorted list.
#     add the smallest element to the sorted list.
#     remove the smallest element from the unsorted list.
# return the sorted list
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Compare this snippet from algorithm_design/sorting/quick_sort.py:
# # create a function that accepts an array as input. the function will create two lists, one named sorted and the other unsorted. at the begning, the unsorted list will be the same as the input array.
# # while the unsorted list is not empty:
# #     find the index of the smallest element in the unsorted list.
# #     add the smallest element to the sorted list.
# #     remove the smallest element from the unsorted list.
# # return the sorted list
# # 
# # 
# # #
# # #
# # # # ! These were generate by CoPilot ALONGSIDE the function.
# # # # def test_bubble_sort():
# # # #     print(""""Testing bubble sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #

=======

# while the length of the unsorted list is not 0:
#     find the index of the smallest element in the unsorted list
#     append the smallest element to the sorted list
#     remove the smallest element from the unsorted list
# return the sorted list
# 
# 
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # Compare this snippet from algorithm_design/sorting/insertion_sort.py:
# # create a function that accepts an array as input. scan the array and find the index of the largest element. at each pass, swap the largest element with the last element in the array.
# # ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # insertion sort is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order.
# # the time complexity is O(n^2)
# # the space complexity is O(1)
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         j = i
#         while j > 0 and arr[j] < arr[j - 1]:
#             arr[j], arr[j - 1] = arr[j - 1], arr[j]
#             j -= 1
#     return arr
# 
# 
# #
# # # ! These were generate by CoPilot ALONGSIDE the

=======

# the function will then iterate through the unsorted list and find the largest element. the largest element will then be swapped with the last element in the unsorted list.
# the function will continue to do this until the unsorted list is empty. the sorted list will contain the sorted array.
# the function will return the sorted list.
# 
# 
# def selection_sort(arr):
#     sorted_array = []
#     while len(arr) > 0:
#         max_index = 0
#         for i in range(len(arr)):
#             if arr[i] > arr[max_index]:
#                 max_index = i
#         sorted_array.append(arr.pop(max_index))
#     return sorted_array
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# Compare this snippet from algorithm_design/sorting/insertion_sort.py:
# # create a function that accepts an array as input. the function will then iterate through the array and swap adjacent elements if they are in the wrong order.
Synthesizing 10/10 solutions

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm. it works by iterating through the array, comparing each element with its neighbors.
# # # if the element is smaller than the neighbor, it is swapped with the neighbor.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] < arr[min_index]:
#                 min_index = j
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # def test_merge_sort():
# # # #     print(""""Testing merge sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# # # #
# # # # def test_selection_sort():
# # # #     print(""""Testing selection sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(selection_sort

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the list to be sorted, finding the minimum value, and swapping it with the current element.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# #
# #
# # def selection_sort(arr):
# #     for i in range(len(arr)):
# #         min_index = i
# #         for j in range(i + 1, len(arr)):
# #             if arr[j] < arr[min_index]:
# #                 min_index = j
# #         arr[i], arr[min_index] = arr[min_index], arr[i]
# #     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8, 7, 6, 5, 4, 3

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # selection sort is a simple sorting algorithm that works by iterating through the array, finding the smallest element, and swapping it with the element at the current index.
# # # the time complexity is O(n^2)
# # # the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         min_value = arr[i]
#         for j in range(i + 1, len(arr)):
#             if arr[j] < min_value:
#                 min_index = j
#                 min_value = arr[j]
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# #
# #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(merge_sort([10, 9, 8

=======

# scan the unsorted list and find the index of the largest element. at each pass, swap the largest element with the last element in the unsorted list.
# the time complexity is O(n^2)
# the space complexity is O(1)
# 
# 
# def selection_sort(arr):
#     for i in range(len(arr)):
#         max_index = i
#         for j in range(i + 1, len(arr)):
#             if arr[j] > arr[max_index]:
#                 max_index = j
#         arr[i], arr[max_index] = arr[max_index], arr[i]
#     return arr
# 
# 
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_selection_sort():
# # #     print(""""Testing selection sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # # # ! These were generate by CoPilot ALONGSIDE the function.
# # # # def test_insertion_sort():
# # # #     print(""""Testing insertion sort"""")
# # # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # # #     print(insertion_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # # #
# #

=======

# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # # while the unsorted list is not empty:
# # # #     find the largest element in the unsorted list and append it to the sorted list
# # # #     remove the largest element from the unsorted list
# # # # return the sorted list
# #
# #
# # def merge_sort(arr):
# #     if len(arr) <= 1:
# #         return arr
# #     mid = len(arr) // 2
# #     left = merge_sort(arr[:mid])
# #     right = merge_sort(arr[mid:])
# #     return merge(left, right)
# #
# #
# # def merge(left, right):
# #     sorted_arr = []
# #     while len(left) > 0 and len(right) > 0:
# #         if left[0] > right[0]:
# #             sorted_arr.append(right.pop(0))
# #         else:
# #             sorted_arr.append(left.pop(0))
# #     if len(left) > 0:
# #         sorted_arr.extend(left)
# #     if len(right) > 0:
# #         sorted_arr.extend(right)
# #     return sorted_arr
# #
# #
# # # ! These were generate by CoPilot ALONGSIDE the function.
# # # def test_bubble_sort():
# # #     print(""""Testing bubble sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"""")
# # #     print(bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
# # #
# # #
# # # def test_merge_sort():
# # #     print(""""Testing merge sort"""")
# # #     print(""""Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10

=======

# psudeo code:
# while the unsorted list is not empty:
#     find the smallest element in the unsorted list and append it to the sorted list.
#     remove the smallest element from the unsorted list.
# return the sorted list.
# 
# 
# def selection_sort(arr):
#     # psudeo code:
#     # while unsorted list is not empty:
#     #     find the smallest element in the unsorted list and a"