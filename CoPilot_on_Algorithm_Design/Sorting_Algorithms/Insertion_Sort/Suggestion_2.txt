"Synthesizing 3/10 solutions

=======

# import random
# 
# 
# def insertion_sort(array):
#     for i in range(1, len(array)):
#         key = array[i]
#         j = i - 1
#         while j >= 0 and array[j] > key:
#             array[j + 1] = array[j]
#             j -= 1
#         array[j + 1] = key
#     return array
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# create a function to sort an array of size n in ascending order:
# 1: Iterate from arr[0] to arr[n] over the array.
# 2: Compare the current element (key) to its predecessor.
# 3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.
# source https://www.geeksforgeeks.org/insertion-sort/?ref=lbp - accessed on 30/03/2022
# import random
# 
# 
# def insertion_sort(array):
#     for i in range(1, len(array)):
#         key = array[i]
#         j = i - 1
#         while j >= 0 and array[j] > key:
#             array[j + 1] = array[j]
#             j -= 1
#         array[j + 1] = key
#     return array
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# create a function to sort an array of size n in ascending order:
# 1: Iterate from arr[0] to arr[n] over the array.
# 2: Compare the current element (key) to its predecessor.
# 3: If the key element is smaller than its predecessor, compare it

=======

# 
# def insertion_sort(array):
#     for i in range(1, len(array)):
#         key = array[i]
#         j = i - 1
#         while j >= 0 and key < array[j]:
#             array[j + 1] = array[j]
#             j -= 1
#         array[j + 1] = key
#     return array
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# create a function to sort an array of size n in descending order:
# 1: Iterate from arr[0] to arr[n] over the array.
# 2: Compare the current element (key) to its predecessor.
# 3: If the key element is greater than its predecessor, compare it to the elements before. Move the lesser elements one position up to make space for the swapped element.
# source https://www.geeksforgeeks.org/insertion-sort/?ref=lbp - accessed on 30/03/2022
# 
# def insertion_sort(array):
#     for i in range(1, len(array)):
#         key = array[i]
#         j = i - 1
#         while j >= 0 and key > array[j]:
#             array[j + 1] = array[j]
#             j -= 1
#         array[j + 1] = key
#     return array
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# create a function to sort an array of size n in descending order:
# 1: Iterate from arr[0] to arr[n] over the array.
# 2: Compare the current element (key) to its predecessor.
# 3: If the key element is greater than its predecessor, compare it to the elements before. Move the lesser elements one position up to make space for the swapped element.
#

=======

# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# source https://www.geeksforgeeks.org/insertion-sort/?ref=lbp - accessed on 30/03/2022
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _ in range(10)]
#     print(insertion_sort(test))
# 
# source https://www.geeksforgeeks.org/insertion-sort/?ref=lbp - accessed on 30/03/2022
# 
# 
# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# 
# 
# if __name__ == ""__main__"":
#     test = [random.randint(0, 100) for _"