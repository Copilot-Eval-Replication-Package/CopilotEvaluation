

import random

def selection_sort(arr):
    for i in range(0, len(arr)):
        min_index = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr


if __name__ == "__main__":
    test = [random.randint(0, 100) for _ in range(10)]
    print(test)
    print(selection_sort(test))

#Compare this snippet from algorithm_design/sorting/heap_sort.py:
# create a function that recieves an array as input. it divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.
# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # heap sort is a divide and conquer algorithm. it works by recursively splitting the array into smaller pieces until each piece is a single element. then, it combines the two sorted pieces.
# # the time complexity is O(n log n)
# # the space complexity is O(n)


def heap_sort(arr):
    heapify(arr)
    for i in range(len(arr) - 1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]
        heapify(arr[:i])
    return arr


def heapify(arr):
    for i in range(len(arr) - 1, -1, -1):
        heapify_max(arr, i)


def heapify_max(arr, i):
    left = 2 * i + 1
    right = 2 * i + 2
    largest = i
   