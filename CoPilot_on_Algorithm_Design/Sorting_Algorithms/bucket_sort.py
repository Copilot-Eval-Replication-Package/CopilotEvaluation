# given an array of n elements, where the element are between 0 and 1,
# create a new array that contains n arrays and insert each element from the original array into the appropriate bucket.
# !!!! Everything below was generated by copilot (including the "Below comment was geenrated by copilot" comment)
#
# # what is the time complexity of this algorithm?
# #! Below comment was geenrated by copilot
# # O(n) where n is the length of the input array
def bucket_sort(array):
    buckets = [[] for _ in range(len(array))]
    for i in array:
        buckets[int(i * len(buckets))].append(i)
    array = []
    for i in buckets:
        array.extend(i)
    return array


# Given an array of integers, where each element is between 0 and n-1, sort the array in ascending order by first comparing the first digit and then the second digit, and so on.
#
#
# # what is the time complexity of this algorithm?
# #! Below comment was geenrated by copilot
# # O(n) where n is the length of the input array
# def radix_sort(array):
#     max_digit = 0
#     for i in array:
#         if len(str(i)) > max_digit:
#             max_digit = len(str(i))
#     for i in range(1, max_digit+1):
#         buckets = [[] for _ in range(10)]
#         for j in array:
#             buckets[(j//10**(i-1))%10].append(j)
#         array = []
#         for k in buckets:
#             array.extend(k)
#     return array
#
# test=[1,2,3,4,5,56,6]
# radix_sort(test)
# Given an array of integers, where each element is between 0 and n-1, sort the array in ascending order by first comparing the first digit and then the second digit, and so on.
#
#
# # what is the time complexity of this algorithm?
# #! Below comment was geenrated by cop
if __name__ == "__main__":
    test = [0.1, 0.2, 0.3, 0.5, 0.4, 0.6]
    bucket_sort(test)
