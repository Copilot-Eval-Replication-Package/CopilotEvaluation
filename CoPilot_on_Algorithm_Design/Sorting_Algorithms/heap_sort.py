# create a function that implements heap sort
# ! Below comment was generated by CoPilot ALONGSIDE the function. It also generated an algorithm for selection sort!
# # # heap sort is a simple sorting algorithm. it works by iterating through the array, comparing each element with its neighbors.
# # # if the element is smaller than the neighbor, it is swapped with the neighbor.
# # # the time complexity is O(n log n)
# # # the space complexity is O(1)
#
#
def heapify(arr, n, i):
    # ! psuedo code below was generated by CoPilot AFTER function was created.
    # psudeo code:
    # while i is not a leaf node:
    #     if left child is larger than parent:
    #         swap left child with parent
    #         i = left child
    #     else:
    #         if right child is larger than parent:
    #             swap right child with parent
    #             i = right child
    #         else:
    #             break
    # return arr

    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[i] < arr[l]:
        largest = l
    if r < n and arr[largest] < arr[r]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)


def heap_sort(arr):
    # psuedo code:
    # build a max heap
    # ! it can't generate any more psuedo code.
    n = len(arr)
    for i in range(n, -1, -1):
        heapify(arr, n, i)
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr


#
#
# # ! These were generate by CoPilot ALONGSIDE the function.
# # def test_heap_sort():
# #     print("Testing heap sort")
# #     print("Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
# #     print(heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
#
#
# # def test_merge_sort():
# #     print("Testing merge sort")
# #     print("Should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

if __name__ == "__main__":
    test = [1, 2, 3, 4, 5, 56, 6]
    heap_sort(test)
